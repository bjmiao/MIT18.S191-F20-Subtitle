1
00:00:00,719 --> 00:00:03,399
in julia we can define our own types

2
00:00:03,600 --> 00:00:05,399
so why would we want to do this and and

3
00:00:05,599 --> 00:00:07,639
how do we go about it

4
00:00:07,839 --> 00:00:11,240
so let's think about a rectangle

5
00:00:11,439 --> 00:00:13,800
it has a width and a height two

6
00:00:14,000 --> 00:00:14,359
different

7
00:00:14,558 --> 00:00:16,039
numbers that we need to describe the

8
00:00:16,239 --> 00:00:18,919
rectangle similarly a complex number

9
00:00:19,118 --> 00:00:21,800
has a real part and an imaginary part

10
00:00:22,000 --> 00:00:23,400
and a position vector

11
00:00:23,600 --> 00:00:25,640
in two dimensions has also two

12
00:00:25,839 --> 00:00:26,679
components

13
00:00:26,879 --> 00:00:28,199
in each of these cases we could

14
00:00:28,399 --> 00:00:29,879
naturally describe

15
00:00:30,079 --> 00:00:33,239
the object by two numbers in a tuple

16
00:00:33,439 --> 00:00:36,839
or a pair and in julia we could do this

17
00:00:37,039 --> 00:00:39,479
also as a as a tuple just by writing

18
00:00:39,679 --> 00:00:40,439
three comma four

19
00:00:40,640 --> 00:00:43,159
in parentheses and so we could literally

20
00:00:43,359 --> 00:00:44,838
write rectangle equals three

21
00:00:45,039 --> 00:00:47,320
four three comma four to mean that the

22
00:00:47,520 --> 00:00:49,399
width was three and the height was four

23
00:00:49,600 --> 00:00:51,959
similarly c equals three comma four

24
00:00:52,159 --> 00:00:52,998
could mean

25
00:00:53,198 --> 00:00:54,759
we were going to interpret that to mean

26
00:00:54,960 --> 00:00:56,358
that the complex number

27
00:00:56,558 --> 00:00:59,640
is three plus 4 times i

28
00:00:59,840 --> 00:01:01,399
but it's clear that there's a problem

29
00:01:01,600 --> 00:01:03,479
here because we're not telling julia

30
00:01:03,679 --> 00:01:06,679
this is a rectangle 3 4 and this is a

31
00:01:06,879 --> 00:01:07,640
complex number

32
00:01:07,840 --> 00:01:10,359
with 3 and 4. somehow we need to give it

33
00:01:10,560 --> 00:01:11,560
that extra information

34
00:01:11,760 --> 00:01:13,480
because for example we might want to

35
00:01:13,680 --> 00:01:15,319
take the width of a rectangle

36
00:01:15,519 --> 00:01:17,000
but we don't want to be able to

37
00:01:17,200 --> 00:01:19,799
calculate the width of a complex number

38
00:01:20,000 --> 00:01:22,519
so this is why we need to be able to

39
00:01:22,719 --> 00:01:24,039
define our own types

40
00:01:24,239 --> 00:01:27,399
we want to define a rectangle type right

41
00:01:27,599 --> 00:01:30,840
how do we do that so what does it mean

42
00:01:31,040 --> 00:01:32,278
to define a type

43
00:01:32,478 --> 00:01:34,759
a rectangle type should reflect the fact

44
00:01:34,959 --> 00:01:35,640
that object

45
00:01:35,840 --> 00:01:38,278
of type rectangle should have a width

46
00:01:38,478 --> 00:01:40,200
and a height that belong to them

47
00:01:40,400 --> 00:01:41,640
we should be able to access those

48
00:01:41,840 --> 00:01:43,319
variables and talk about

49
00:01:43,519 --> 00:01:46,918
an actual object being of type rectangle

50
00:01:47,118 --> 00:01:49,799
and that is a kind of schema or template

51
00:01:50,000 --> 00:01:50,198
for

52
00:01:50,399 --> 00:01:52,840
what all rectangles should look like and

53
00:01:53,040 --> 00:01:54,519
then we want to be able to create

54
00:01:54,719 --> 00:01:57,558
object which follow that pattern

55
00:01:57,759 --> 00:01:59,159
and we should be able to create

56
00:01:59,359 --> 00:02:01,159
different objects which have their own

57
00:02:01,359 --> 00:02:02,840
data inside and we're going to call

58
00:02:03,040 --> 00:02:05,079
those fields of the type

59
00:02:05,280 --> 00:02:07,159
and so this is the way that julia allows

60
00:02:07,359 --> 00:02:08,118
us to construct

61
00:02:08,318 --> 00:02:11,160
new types we use the struct keyword

62
00:02:11,360 --> 00:02:11,640
which is

63
00:02:11,840 --> 00:02:14,520
short for structure and we give the name

64
00:02:14,719 --> 00:02:15,640
of the object

65
00:02:15,840 --> 00:02:17,719
in this case rectangle and we always

66
00:02:17,919 --> 00:02:19,880
will use a capital letter at the start

67
00:02:20,080 --> 00:02:20,600
of the type

68
00:02:20,800 --> 00:02:23,000
name and in fact at the start of each

69
00:02:23,199 --> 00:02:24,679
word in the type name

70
00:02:24,878 --> 00:02:27,560
if there are several words and then we

71
00:02:27,759 --> 00:02:29,000
will give a list

72
00:02:29,199 --> 00:02:31,880
inside this definition of each field

73
00:02:32,080 --> 00:02:32,280
name

74
00:02:32,479 --> 00:02:35,160
that we want and which type we want that

75
00:02:35,360 --> 00:02:35,800
field

76
00:02:36,000 --> 00:02:38,360
to be so in this case we're saying that

77
00:02:38,560 --> 00:02:40,118
there is a field called width

78
00:02:40,318 --> 00:02:42,759
of type float64 and a field of height

79
00:02:42,959 --> 00:02:45,160
which is also of typeflow 64.

80
00:02:45,360 --> 00:02:46,920
these types don't have to be the same

81
00:02:47,120 --> 00:02:49,560
it's just in this case they are

82
00:02:49,759 --> 00:02:51,000
we could have height which was an

83
00:02:51,199 --> 00:02:52,679
integer for example that's perfectly

84
00:02:52,878 --> 00:02:53,800
fine

85
00:02:54,000 --> 00:02:55,480
and so this is telling us what the

86
00:02:55,680 --> 00:02:57,560
template or schema of this object

87
00:02:57,759 --> 00:03:00,280
is we now want to create objects of that

88
00:03:00,479 --> 00:03:00,679
type

89
00:03:00,878 --> 00:03:03,800
which we do by using the same type name

90
00:03:04,000 --> 00:03:06,439
as if it were actually a function name

91
00:03:06,639 --> 00:03:06,920
so

92
00:03:07,120 --> 00:03:09,080
here you can see that i'm using the type

93
00:03:09,280 --> 00:03:10,039
name rectangle

94
00:03:10,239 --> 00:03:12,840
exactly as i spelt it before and i'm

95
00:03:13,039 --> 00:03:14,759
using it as a function and i'm passing

96
00:03:14,959 --> 00:03:16,439
in the values which i would like to

97
00:03:16,639 --> 00:03:17,000
store

98
00:03:17,199 --> 00:03:20,200
inside the object so when i do that i

99
00:03:20,400 --> 00:03:20,920
actually

100
00:03:21,120 --> 00:03:24,039
create an object r which is a rectangle

101
00:03:24,239 --> 00:03:26,920
if i click on this triangle we see that

102
00:03:27,120 --> 00:03:28,280
the rectangle

103
00:03:28,479 --> 00:03:31,480
contains the width field which has value

104
00:03:31,680 --> 00:03:33,880
1.0 and the height field which has value

105
00:03:34,080 --> 00:03:36,599
2.5

106
00:03:36,799 --> 00:03:38,840
so we can say that i have created an

107
00:03:39,039 --> 00:03:40,439
object which is called

108
00:03:40,639 --> 00:03:43,800
r r is a variable just as if it were an

109
00:03:44,000 --> 00:03:44,360
integer

110
00:03:44,560 --> 00:03:46,920
but r is actually of type rectangle and

111
00:03:47,120 --> 00:03:47,560
inside

112
00:03:47,759 --> 00:03:50,679
r there are these two values stored

113
00:03:50,878 --> 00:03:53,160
so if i do type of r it tells me that

114
00:03:53,360 --> 00:03:54,360
it's a rectangle

115
00:03:54,560 --> 00:03:57,560
i can also say r is a rectangle

116
00:03:57,759 --> 00:04:01,080
which tells me is r of that type or not

117
00:04:01,280 --> 00:04:03,480
i can go in and extract information from

118
00:04:03,680 --> 00:04:04,280
the object

119
00:04:04,479 --> 00:04:07,640
using r dot width for example or

120
00:04:07,840 --> 00:04:10,280
r dot height the dot operator here is

121
00:04:10,479 --> 00:04:10,920
saying

122
00:04:11,120 --> 00:04:13,959
extract the field called whatever comes

123
00:04:14,158 --> 00:04:15,000
after the dot

124
00:04:15,199 --> 00:04:16,840
from the object that comes before the

125
00:04:17,040 --> 00:04:18,598
dot

126
00:04:18,798 --> 00:04:20,199
and of course now we can also create

127
00:04:20,399 --> 00:04:22,120
another object r2

128
00:04:22,319 --> 00:04:24,840
is also a rectangle with different

129
00:04:25,040 --> 00:04:25,718
contents

130
00:04:25,918 --> 00:04:28,199
3 and 4 in this case and so this is a

131
00:04:28,399 --> 00:04:29,559
separate rectangle so there's one

132
00:04:29,759 --> 00:04:31,079
rectangle living over here another

133
00:04:31,279 --> 00:04:32,600
rectangle living over here

134
00:04:32,800 --> 00:04:34,278
and of course they have different

135
00:04:34,478 --> 00:04:36,520
heights and widths the height and width

136
00:04:36,720 --> 00:04:38,040
being stored inside

137
00:04:38,240 --> 00:04:40,199
the object so i like to think of these

138
00:04:40,399 --> 00:04:42,278
objects as boxes or bags

139
00:04:42,478 --> 00:04:44,439
which contain this data and you can kind

140
00:04:44,639 --> 00:04:45,400
of go in and

141
00:04:45,600 --> 00:04:47,800
pull out the data from that object and

142
00:04:48,000 --> 00:04:48,439
you can pull

143
00:04:48,639 --> 00:04:50,199
out the data from that object and those

144
00:04:50,399 --> 00:04:52,278
data have names i can say oh

145
00:04:52,478 --> 00:04:54,680
ah please give me your width and then r2

146
00:04:54,879 --> 00:04:56,759
please give me your width

147
00:04:56,959 --> 00:04:58,999
so we often call these types composite

148
00:04:59,199 --> 00:05:01,240
types or composite types

149
00:05:01,439 --> 00:05:03,559
because the information is being put

150
00:05:03,759 --> 00:05:04,360
together

151
00:05:04,560 --> 00:05:07,160
into this bag or aggregated they're also

152
00:05:07,360 --> 00:05:09,240
called aggregate types we're collecting

153
00:05:09,439 --> 00:05:11,879
lots of disparate or distinct pieces of

154
00:05:12,079 --> 00:05:13,400
information which may be of different

155
00:05:13,600 --> 00:05:15,160
types but they all somehow belong

156
00:05:15,360 --> 00:05:16,040
together

157
00:05:16,240 --> 00:05:18,920
and they describe one object now that we

158
00:05:19,120 --> 00:05:20,999
have these objects we might want to

159
00:05:21,199 --> 00:05:23,718
modify them so maybe my rectangle for

160
00:05:23,918 --> 00:05:25,240
some reason changed size

161
00:05:25,439 --> 00:05:27,718
so what can i do about that well i might

162
00:05:27,918 --> 00:05:28,759
want to go in

163
00:05:28,959 --> 00:05:30,838
and try to change the width of my

164
00:05:31,038 --> 00:05:32,838
rectangle so let's try and set the width

165
00:05:33,038 --> 00:05:33,718
to 10

166
00:05:33,918 --> 00:05:36,120
by just going in and changing this field

167
00:05:36,319 --> 00:05:37,400
and what i find is that

168
00:05:37,600 --> 00:05:40,360
i get an error it's telling me that the

169
00:05:40,560 --> 00:05:41,639
rectangle type is

170
00:05:41,839 --> 00:05:44,360
immutable it is unchangeable i cannot

171
00:05:44,560 --> 00:05:45,240
modify

172
00:05:45,439 --> 00:05:48,838
the fields of this object and so that

173
00:05:49,038 --> 00:05:51,559
is a choice in julia that by default

174
00:05:51,759 --> 00:05:52,199
structs

175
00:05:52,399 --> 00:05:54,838
or composite types are actually

176
00:05:55,038 --> 00:05:55,800
immutable

177
00:05:56,000 --> 00:05:58,759
unchangeable unmodifiable and the reason

178
00:05:58,959 --> 00:06:00,600
for this is that that often leads to

179
00:06:00,800 --> 00:06:01,960
faster code

180
00:06:02,160 --> 00:06:04,838
of course there is a way of making a

181
00:06:05,038 --> 00:06:06,199
type which is mutable

182
00:06:06,399 --> 00:06:08,838
you do that by writing mutable struct

183
00:06:09,038 --> 00:06:09,639
instead of

184
00:06:09,839 --> 00:06:12,119
struct so go away and try that make a

185
00:06:12,319 --> 00:06:12,920
new struct

186
00:06:13,120 --> 00:06:14,999
with a different name and try and modify

187
00:06:15,199 --> 00:06:16,920
its fields and you will be able to

188
00:06:17,120 --> 00:06:19,718
so that is of course sometimes something

189
00:06:19,918 --> 00:06:21,718
that's useful to be able to do

190
00:06:21,918 --> 00:06:24,360
but immutable structs are much more

191
00:06:24,560 --> 00:06:24,920
common

192
00:06:25,120 --> 00:06:30,120
in julia and much more useful

