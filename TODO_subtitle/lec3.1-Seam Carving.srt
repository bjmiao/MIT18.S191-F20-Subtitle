1
00:00:00,080 --> 00:00:01,080
this week we are going to be talking

2
00:00:01,280 --> 00:00:03,639
about an algorithm for resizing an image

3
00:00:03,839 --> 00:00:05,240
but without resizing the

4
00:00:05,440 --> 00:00:07,639
objects within it so i've skipped all

5
00:00:07,839 --> 00:00:09,240
the way to the bottom of a notebook that

6
00:00:09,439 --> 00:00:10,600
you're going to go through this week

7
00:00:10,800 --> 00:00:13,080
and what you'll see is we've got this

8
00:00:13,279 --> 00:00:14,599
very famous image the persistence of

9
00:00:14,798 --> 00:00:15,160
memory

10
00:00:15,359 --> 00:00:17,079
on the left all the melting clocks and

11
00:00:17,278 --> 00:00:18,440
then on the right is going to be a

12
00:00:18,640 --> 00:00:19,800
squished version of it

13
00:00:20,000 --> 00:00:21,480
and based on how i tweak this slider we

14
00:00:21,679 --> 00:00:23,159
can squish it to be narrower and

15
00:00:23,359 --> 00:00:24,199
narrower

16
00:00:24,399 --> 00:00:26,519
but if you'll notice even as i get it to

17
00:00:26,719 --> 00:00:27,960
be about half the width that it was

18
00:00:28,160 --> 00:00:28,760
before

19
00:00:28,960 --> 00:00:30,359
the clocks themselves haven't actually

20
00:00:30,559 --> 00:00:32,919
changed their width nor has this

21
00:00:33,119 --> 00:00:35,479
weird monster looking creature instead

22
00:00:35,679 --> 00:00:37,000
the algorithm is smart enough to kind of

23
00:00:37,200 --> 00:00:38,119
kill the dead space

24
00:00:38,320 --> 00:00:40,038
inside the image without killing any of

25
00:00:40,238 --> 00:00:42,038
the content and if you contrast this

26
00:00:42,238 --> 00:00:43,399
with how you know a lot of design

27
00:00:43,600 --> 00:00:43,799
software

28
00:00:44,000 --> 00:00:45,640
handles things if i were to open up you

29
00:00:45,840 --> 00:00:47,399
know illustrator and i take the same

30
00:00:47,600 --> 00:00:49,000
image and i say i want to

31
00:00:49,200 --> 00:00:50,599
rescale it i want to make it half the

32
00:00:50,799 --> 00:00:52,599
width it squishes all of the contents

33
00:00:52,799 --> 00:00:54,919
inside it sort of deforms it

34
00:00:55,119 --> 00:00:56,678
other pieces of design software actually

35
00:00:56,878 --> 00:00:58,518
have different defaults so if i were to

36
00:00:58,719 --> 00:00:59,239
go to

37
00:00:59,439 --> 00:01:02,518
figma for example and i take the same

38
00:01:02,719 --> 00:01:04,039
same image and i say okay let's try to

39
00:01:04,239 --> 00:01:06,519
rescale it what it defaults to doing

40
00:01:06,719 --> 00:01:08,359
is cropping it so it'll take out some of

41
00:01:08,560 --> 00:01:10,119
the content on the left edge

42
00:01:10,319 --> 00:01:11,480
but if you want to somehow get the best

43
00:01:11,680 --> 00:01:12,918
of both worlds where you're not getting

44
00:01:13,118 --> 00:01:14,359
rid of anything on the inside

45
00:01:14,560 --> 00:01:16,119
but you're not deforming anything on the

46
00:01:16,319 --> 00:01:18,519
inside this tactic which is called seam

47
00:01:18,719 --> 00:01:19,319
carving

48
00:01:19,519 --> 00:01:21,399
is kind of a shockingly effective way to

49
00:01:21,599 --> 00:01:22,918
do that

50
00:01:23,118 --> 00:01:25,000
so i'm going to give the high level view

51
00:01:25,200 --> 00:01:26,599
of how this algorithm works in this

52
00:01:26,799 --> 00:01:28,119
lecture and start to go through a bit of

53
00:01:28,319 --> 00:01:29,799
this notebook kind of from the bottom to

54
00:01:30,000 --> 00:01:30,278
the top

55
00:01:30,478 --> 00:01:32,679
at first and as the week progresses with

56
00:01:32,879 --> 00:01:33,878
the other lectures we're really going to

57
00:01:34,078 --> 00:01:35,079
dig into the code

58
00:01:35,280 --> 00:01:37,399
for how this is possible so the first

59
00:01:37,599 --> 00:01:38,119
step

60
00:01:38,319 --> 00:01:39,319
i'm going to go ahead and change what's

61
00:01:39,519 --> 00:01:41,799
displayed here to give a little inkling

62
00:01:42,000 --> 00:01:43,878
of what's going on

63
00:01:44,078 --> 00:01:45,159
on the right you'll notice these sort of

64
00:01:45,359 --> 00:01:47,319
pink lightning bolts what's happening is

65
00:01:47,519 --> 00:01:48,359
that with each step

66
00:01:48,560 --> 00:01:50,519
as we're making the image smaller the

67
00:01:50,719 --> 00:01:51,719
algorithm decides on

68
00:01:51,920 --> 00:01:54,119
a seam to remove from the image so this

69
00:01:54,319 --> 00:01:55,799
is a set of pixels where there's one

70
00:01:56,000 --> 00:01:57,000
pixel per row

71
00:01:57,200 --> 00:01:58,918
that forms this continuous path from the

72
00:01:59,118 --> 00:02:00,278
top to the bottom

73
00:02:00,478 --> 00:02:03,238
and it has to somehow decide what path

74
00:02:03,438 --> 00:02:04,918
is the one that's most okay to get rid

75
00:02:05,118 --> 00:02:05,480
of

76
00:02:05,680 --> 00:02:06,679
so you'll notice right here it's this

77
00:02:06,879 --> 00:02:08,279
path that's avoiding the branch it's

78
00:02:08,479 --> 00:02:09,719
avoiding the clock

79
00:02:09,919 --> 00:02:11,160
but it's just going through the sky in

80
00:02:11,360 --> 00:02:12,280
the ground and it's saying that's

81
00:02:12,479 --> 00:02:13,880
probably something that we can cut out

82
00:02:14,080 --> 00:02:15,480
and it keeps the image looking largely

83
00:02:15,680 --> 00:02:17,480
the same and as i keep shrinking it

84
00:02:17,680 --> 00:02:18,920
further and further it's choosing these

85
00:02:19,120 --> 00:02:20,759
other seams which look like these pink

86
00:02:20,959 --> 00:02:22,360
lightning bolts

87
00:02:22,560 --> 00:02:24,600
so question is of course you know how do

88
00:02:24,800 --> 00:02:26,840
we find that what is it actually doing

89
00:02:27,039 --> 00:02:28,280
and the tactic here is going to be to

90
00:02:28,479 --> 00:02:30,360
assign some kind of importance to each

91
00:02:30,560 --> 00:02:32,280
of the pixels in the screen

92
00:02:32,479 --> 00:02:34,759
and then find the path from the top to

93
00:02:34,959 --> 00:02:35,399
the bottom

94
00:02:35,598 --> 00:02:37,319
which passes through the least important

95
00:02:37,519 --> 00:02:39,000
pixels or if we would have you know a

96
00:02:39,199 --> 00:02:40,920
number associated with that importance

97
00:02:41,120 --> 00:02:42,439
as you add up that number from top to

98
00:02:42,639 --> 00:02:44,759
bottom it should be minimizing that

99
00:02:44,959 --> 00:02:46,200
total quantity

100
00:02:46,400 --> 00:02:47,480
and there's different approaches that

101
00:02:47,680 --> 00:02:49,000
you can take and the original paper on

102
00:02:49,199 --> 00:02:50,920
this describes several different ones

103
00:02:51,120 --> 00:02:53,160
but what we're going to do in

104
00:02:53,360 --> 00:02:54,600
conjunction with what we were talking

105
00:02:54,800 --> 00:02:55,800
about last week

106
00:02:56,000 --> 00:02:58,360
is a kind of edge detection so skipping

107
00:02:58,560 --> 00:02:59,640
up higher in the notebook here we've got

108
00:02:59,840 --> 00:03:00,920
the same image on the left

109
00:03:01,120 --> 00:03:02,520
and on the right you'll notice that

110
00:03:02,719 --> 00:03:04,118
we've pulled out all of the edges into

111
00:03:04,318 --> 00:03:04,759
this really

112
00:03:04,959 --> 00:03:06,679
kind of pretty looking pencil sketch

113
00:03:06,878 --> 00:03:08,600
view and what we're going to say is that

114
00:03:08,800 --> 00:03:10,200
the importance of a pixel

115
00:03:10,400 --> 00:03:12,118
is going to be the extent to which it

116
00:03:12,318 --> 00:03:13,880
sits inside an edge so all of the white

117
00:03:14,080 --> 00:03:15,480
ones that we see on the right here

118
00:03:15,680 --> 00:03:16,759
would be considered important they

119
00:03:16,959 --> 00:03:18,920
shouldn't be cut out but anything black

120
00:03:19,120 --> 00:03:20,600
so you notice that's coming from the sky

121
00:03:20,800 --> 00:03:22,200
it's coming from the ground

122
00:03:22,400 --> 00:03:23,880
all of that where there's not any sharp

123
00:03:24,080 --> 00:03:25,640
edges those are the pixels that we're

124
00:03:25,840 --> 00:03:27,319
okay removing

125
00:03:27,519 --> 00:03:29,240
now in the last lecture on convolutions

126
00:03:29,439 --> 00:03:31,240
i touched just a tiny bit on edge

127
00:03:31,439 --> 00:03:33,000
detection with sobel filters

128
00:03:33,199 --> 00:03:34,840
but let me switch to another notebook

129
00:03:35,039 --> 00:03:36,679
here to go into a little bit more detail

130
00:03:36,878 --> 00:03:37,480
on that

131
00:03:37,680 --> 00:03:39,240
so i've got a very simple image here

132
00:03:39,439 --> 00:03:41,399
which is just a white blob in a blue

133
00:03:41,598 --> 00:03:42,360
background

134
00:03:42,560 --> 00:03:43,640
and what we're going to want to do is

135
00:03:43,840 --> 00:03:45,640
somehow pick up on all of the edges

136
00:03:45,840 --> 00:03:46,039
which

137
00:03:46,239 --> 00:03:48,840
should just form a circle around it in

138
00:03:49,039 --> 00:03:50,520
this cell here i'm looking at the kernel

139
00:03:50,719 --> 00:03:52,599
library and i'm calling sobel

140
00:03:52,799 --> 00:03:55,000
which if you'll remember pulls out two

141
00:03:55,199 --> 00:03:56,599
little three by three arrays

142
00:03:56,799 --> 00:03:58,200
so if we were to just look at the raw

143
00:03:58,400 --> 00:03:59,640
data for one of those arrays the one

144
00:03:59,840 --> 00:04:00,679
that i'm naming s

145
00:04:00,878 --> 00:04:02,599
x and you'll see it's a three by three

146
00:04:02,799 --> 00:04:04,280
array it's got

147
00:04:04,479 --> 00:04:06,599
values zero down the center column and

148
00:04:06,799 --> 00:04:07,880
then positive values on the right

149
00:04:08,080 --> 00:04:09,640
negative values on the left

150
00:04:09,840 --> 00:04:11,880
and if we just pull up a simple function

151
00:04:12,080 --> 00:04:13,000
to visualize that

152
00:04:13,199 --> 00:04:14,920
we're looking at it as blue on the right

153
00:04:15,120 --> 00:04:16,759
and red on the left

154
00:04:16,959 --> 00:04:20,680
and if we look at the other one sy

155
00:04:20,879 --> 00:04:22,120
same deal but it's just kind of pulling

156
00:04:22,319 --> 00:04:24,999
out from the top and the bottom

157
00:04:25,199 --> 00:04:26,278
and now let's say we were to do a

158
00:04:26,478 --> 00:04:28,120
convolution with one of these filters so

159
00:04:28,319 --> 00:04:29,400
maybe i'll take this one in the x

160
00:04:29,600 --> 00:04:30,040
direction

161
00:04:30,240 --> 00:04:31,879
so a simple three by three grid and i'm

162
00:04:32,079 --> 00:04:33,718
going to do this convolution against the

163
00:04:33,918 --> 00:04:35,240
blob image at the top

164
00:04:35,439 --> 00:04:36,600
which as you might remember from last

165
00:04:36,800 --> 00:04:37,960
lecture means we sort of take this

166
00:04:38,160 --> 00:04:39,559
kernel and have it walk across every

167
00:04:39,759 --> 00:04:40,199
pixel

168
00:04:40,399 --> 00:04:42,759
and take a weighted sum what we end up

169
00:04:42,959 --> 00:04:44,759
getting is something that produces

170
00:04:44,959 --> 00:04:47,400
positive values wherever the uh blob

171
00:04:47,600 --> 00:04:49,400
image was fading from bright towards

172
00:04:49,600 --> 00:04:50,199
darker

173
00:04:50,399 --> 00:04:51,718
and then negative values where it was

174
00:04:51,918 --> 00:04:54,120
fading from dark towards bright

175
00:04:54,319 --> 00:04:55,559
and if that seems like the opposite of

176
00:04:55,759 --> 00:04:56,920
what you might expect thinking of this

177
00:04:57,120 --> 00:04:58,439
kernel remember that with convolutions

178
00:04:58,639 --> 00:04:59,400
we actually think of

179
00:04:59,600 --> 00:05:01,079
turning that kernel upside down before

180
00:05:01,279 --> 00:05:03,240
it marches across and again this was all

181
00:05:03,439 --> 00:05:04,838
in the last lecture if you want to

182
00:05:05,038 --> 00:05:07,240
look at that with more detail now

183
00:05:07,439 --> 00:05:08,278
instead if we were to

184
00:05:08,478 --> 00:05:10,600
filter it with the other one the one

185
00:05:10,800 --> 00:05:11,400
that was

186
00:05:11,600 --> 00:05:13,400
in the y direction and if i go and

187
00:05:13,600 --> 00:05:16,360
change what's going on down here

188
00:05:16,560 --> 00:05:18,199
we see that it picks up on the top and

189
00:05:18,399 --> 00:05:19,400
the bottom

190
00:05:19,600 --> 00:05:20,999
now i actually want to visualize this in

191
00:05:21,199 --> 00:05:22,600
a slightly different way so what i'm

192
00:05:22,800 --> 00:05:23,160
going to do

193
00:05:23,360 --> 00:05:26,600
is let me go ahead and hide this cell

194
00:05:26,800 --> 00:05:30,759
and i will also get rid of this cell

195
00:05:30,959 --> 00:05:32,600
here let's look back at the kernel in

196
00:05:32,800 --> 00:05:34,199
the x direction

197
00:05:34,399 --> 00:05:36,120
and then what i'm going to do is look at

198
00:05:36,319 --> 00:05:38,600
a bunch of little vectors on the screen

199
00:05:38,800 --> 00:05:39,480
that indicate

200
00:05:39,680 --> 00:05:41,960
how strong is the convolution of this

201
00:05:42,160 --> 00:05:42,600
image

202
00:05:42,800 --> 00:05:44,920
with that kernel at various points and

203
00:05:45,120 --> 00:05:46,360
then it gives a little direction to it

204
00:05:46,560 --> 00:05:46,920
so

205
00:05:47,120 --> 00:05:49,160
at points where the convolution pops out

206
00:05:49,360 --> 00:05:49,960
positive

207
00:05:50,160 --> 00:05:51,718
it'll be vectors pointing to the right

208
00:05:51,918 --> 00:05:52,999
and where it pops out negative its

209
00:05:53,199 --> 00:05:54,600
vectors pointing to the left

210
00:05:54,800 --> 00:05:56,199
and then if i were to do this in the y

211
00:05:56,399 --> 00:05:58,199
direction which would correspond to

212
00:05:58,399 --> 00:05:59,559
convolving with that

213
00:05:59,759 --> 00:06:03,079
s y kernel same deal basically anywhere

214
00:06:03,279 --> 00:06:04,520
where that convolution is positive it'll

215
00:06:04,720 --> 00:06:05,800
be vectors this time pointing

216
00:06:06,000 --> 00:06:08,360
up and otherwise pointing down and then

217
00:06:08,560 --> 00:06:10,278
the main idea here is going to be to

218
00:06:10,478 --> 00:06:12,278
add those two vectors together so if i

219
00:06:12,478 --> 00:06:13,639
were to just take the ones pointed to

220
00:06:13,839 --> 00:06:13,879
the

221
00:06:14,079 --> 00:06:16,278
uh right so just the ones pointed to the

222
00:06:16,478 --> 00:06:17,960
right and i add them with the ones that

223
00:06:18,160 --> 00:06:19,240
are just pointing up

224
00:06:19,439 --> 00:06:20,520
what we get are these ones that are

225
00:06:20,720 --> 00:06:22,199
pointing away from the brightness

226
00:06:22,399 --> 00:06:23,800
towards the darkness

227
00:06:24,000 --> 00:06:24,920
and any of you familiar with

228
00:06:25,120 --> 00:06:27,639
multivariable calculus might find this

229
00:06:27,839 --> 00:06:28,999
very familiar notion it's something

230
00:06:29,199 --> 00:06:30,759
known as the gradient where if you have

231
00:06:30,959 --> 00:06:31,480
a vector

232
00:06:31,680 --> 00:06:34,199
that has an x component telling you how

233
00:06:34,399 --> 00:06:34,520
much

234
00:06:34,720 --> 00:06:36,278
a value changes as you move from the

235
00:06:36,478 --> 00:06:37,879
left to the right which we might call

236
00:06:38,079 --> 00:06:41,079
the partial derivative with respect to x

237
00:06:41,279 --> 00:06:42,920
and then the y component tells you how

238
00:06:43,120 --> 00:06:44,199
much you change as you move

239
00:06:44,399 --> 00:06:46,439
up and down the partial derivative with

240
00:06:46,639 --> 00:06:47,960
respect to y

241
00:06:48,160 --> 00:06:49,718
when you package those together it gets

242
00:06:49,918 --> 00:06:51,639
you a vector that points

243
00:06:51,839 --> 00:06:53,718
kind of in the direction of greatest

244
00:06:53,918 --> 00:06:54,680
change so

245
00:06:54,879 --> 00:06:56,838
often it's described as the direction of

246
00:06:57,038 --> 00:06:58,040
steepest ascent

247
00:06:58,240 --> 00:06:59,639
and actually in that sense i should be

248
00:06:59,839 --> 00:07:00,920
honest that the vectors that you're

249
00:07:01,120 --> 00:07:02,360
seeing right now are technically in the

250
00:07:02,560 --> 00:07:04,278
negative direction of the gradient

251
00:07:04,478 --> 00:07:06,199
because the gradient proper goes from

252
00:07:06,399 --> 00:07:07,960
the low values towards the high it'll

253
00:07:08,160 --> 00:07:09,240
point from low to high

254
00:07:09,439 --> 00:07:10,838
and this is doing the opposite for our

255
00:07:11,038 --> 00:07:12,680
purposes the direction actually won't

256
00:07:12,879 --> 00:07:13,399
matter that much

257
00:07:13,598 --> 00:07:14,600
all that we're going to care about is

258
00:07:14,800 --> 00:07:16,360
the magnitude of the vectors that we're

259
00:07:16,560 --> 00:07:17,160
looking at

260
00:07:17,360 --> 00:07:18,759
and the reason that it's defaulting to

261
00:07:18,959 --> 00:07:20,278
this is just because

262
00:07:20,478 --> 00:07:22,278
when you do the convolution with a sobo

263
00:07:22,478 --> 00:07:24,439
filter it flips that filter around first

264
00:07:24,639 --> 00:07:25,480
so it's sort of doing

265
00:07:25,680 --> 00:07:27,399
the negative of what you might expect

266
00:07:27,598 --> 00:07:28,920
for the reasons that you know i talked

267
00:07:29,120 --> 00:07:30,680
about last lecture

268
00:07:30,879 --> 00:07:32,119
now while we're here it might be worth

269
00:07:32,319 --> 00:07:34,278
really digging into why this particular

270
00:07:34,478 --> 00:07:35,160
filter this

271
00:07:35,360 --> 00:07:37,879
shape of values is a reasonable way to

272
00:07:38,079 --> 00:07:39,160
try to measure something like

273
00:07:39,360 --> 00:07:40,680
a derivative you know a partial

274
00:07:40,879 --> 00:07:42,199
derivative in the x direction or in the

275
00:07:42,399 --> 00:07:43,480
y direction

276
00:07:43,680 --> 00:07:46,278
so if we go over and we just picture a

277
00:07:46,478 --> 00:07:47,399
grid of values

278
00:07:47,598 --> 00:07:48,920
let's say we want to understand the rate

279
00:07:49,120 --> 00:07:51,160
of change around the pixels surrounding

280
00:07:51,360 --> 00:07:52,119
what i've labeled as

281
00:07:52,319 --> 00:07:55,559
e here the first dead simple thing you

282
00:07:55,759 --> 00:07:56,679
might think to do if you want to know

283
00:07:56,879 --> 00:07:57,879
what's the rate of change

284
00:07:58,079 --> 00:07:59,960
in the x direction is to just look at

285
00:08:00,160 --> 00:08:01,240
the value of that pixel

286
00:08:01,439 --> 00:08:03,800
f and then subtract off the value of

287
00:08:04,000 --> 00:08:04,759
pixel e

288
00:08:04,959 --> 00:08:06,278
and honestly that would probably work

289
00:08:06,478 --> 00:08:08,040
you could have an incredibly simple

290
00:08:08,240 --> 00:08:11,240
kernel that was just adding up the value

291
00:08:11,439 --> 00:08:12,838
to the right subtracting the one to the

292
00:08:13,038 --> 00:08:14,679
left and that would get you some notion

293
00:08:14,879 --> 00:08:16,360
of a partial derivative

294
00:08:16,560 --> 00:08:18,040
but if you want more of the information

295
00:08:18,240 --> 00:08:20,119
in what's going on you might also

296
00:08:20,319 --> 00:08:21,879
want to maybe average this or simply add

297
00:08:22,079 --> 00:08:23,879
it to the difference between e and d

298
00:08:24,079 --> 00:08:26,679
you know what's the change between this

299
00:08:26,879 --> 00:08:28,040
pixel and what's happening just to the

300
00:08:28,240 --> 00:08:28,838
left of it

301
00:08:29,038 --> 00:08:30,278
so we might add on you know the

302
00:08:30,478 --> 00:08:31,880
difference between e and d

303
00:08:32,080 --> 00:08:33,479
and potentially divide the whole thing

304
00:08:33,679 --> 00:08:35,159
by two or average it it doesn't really

305
00:08:35,360 --> 00:08:36,679
matter in absolute terms

306
00:08:36,879 --> 00:08:38,599
all we care about at the end is the

307
00:08:38,799 --> 00:08:40,198
relative terms what's the relative

308
00:08:40,399 --> 00:08:40,919
change

309
00:08:41,120 --> 00:08:42,919
uh around one pixel compared to the

310
00:08:43,120 --> 00:08:45,078
amount of change around another

311
00:08:45,278 --> 00:08:46,839
and if you look at this of course we can

312
00:08:47,039 --> 00:08:49,078
just cancel out the minus e and the plus

313
00:08:49,278 --> 00:08:50,120
e going on

314
00:08:50,320 --> 00:08:52,120
so it's just taking this right value

315
00:08:52,320 --> 00:08:53,879
minus the left one

316
00:08:54,080 --> 00:08:55,559
and again that would probably work

317
00:08:55,759 --> 00:08:57,479
pretty well as an edge detecting filter

318
00:08:57,679 --> 00:08:58,599
if all you did

319
00:08:58,799 --> 00:09:01,559
was take that f minus d but with the

320
00:09:01,759 --> 00:09:03,000
sobel filter effectively what you're

321
00:09:03,200 --> 00:09:03,959
doing is

322
00:09:04,159 --> 00:09:05,959
taking a kind of average with what's

323
00:09:06,159 --> 00:09:07,879
going on on the top row and the bottom

324
00:09:08,080 --> 00:09:09,879
row we're at the top you know we would

325
00:09:10,080 --> 00:09:11,559
be taking the same deal but

326
00:09:11,759 --> 00:09:14,279
the corresponding terms are c and a here

327
00:09:14,480 --> 00:09:15,719
and at the bottom it would look like

328
00:09:15,919 --> 00:09:19,479
i and g and really what a simple filter

329
00:09:19,679 --> 00:09:21,240
does is it gives more weight to this

330
00:09:21,440 --> 00:09:21,959
middle one

331
00:09:22,159 --> 00:09:23,559
since after all that's where the pixel

332
00:09:23,759 --> 00:09:25,559
we care about is so it gives kind of

333
00:09:25,759 --> 00:09:27,000
half weight to the ones on the top and

334
00:09:27,200 --> 00:09:28,359
bottom and then more weight to that

335
00:09:28,559 --> 00:09:29,318
middle one

336
00:09:29,519 --> 00:09:31,000
and if you unpack what this is really

337
00:09:31,200 --> 00:09:32,439
saying in terms of where you add and

338
00:09:32,639 --> 00:09:33,639
where you subtract

339
00:09:33,839 --> 00:09:37,159
it gets you exactly this shape that

340
00:09:37,360 --> 00:09:39,719
we were calling sx over here and if you

341
00:09:39,919 --> 00:09:42,039
just look at its values

342
00:09:42,240 --> 00:09:43,639
it's exactly what i just described

343
00:09:43,839 --> 00:09:45,240
you're taking in that middle row

344
00:09:45,440 --> 00:09:47,240
something on the right minus the part on

345
00:09:47,440 --> 00:09:48,359
the leftmost

346
00:09:48,559 --> 00:09:49,879
and then the top and bottom rows do the

347
00:09:50,080 --> 00:09:52,279
same but scale down by a little bit

348
00:09:52,480 --> 00:09:54,039
the whole point here though is that when

349
00:09:54,240 --> 00:09:55,639
we use those sobo filters to get a

350
00:09:55,839 --> 00:09:57,399
notion of partial derivative in the x

351
00:09:57,600 --> 00:09:58,919
partial derivative in the y

352
00:09:59,120 --> 00:10:01,078
and that gets us a gradient vector if we

353
00:10:01,278 --> 00:10:03,078
just look at the magnitude of that

354
00:10:03,278 --> 00:10:04,039
gradient vector

355
00:10:04,240 --> 00:10:05,959
and i'm going to plot it down here where

356
00:10:06,159 --> 00:10:07,639
white means a higher magnitude black

357
00:10:07,839 --> 00:10:09,240
means a lower magnitude

358
00:10:09,440 --> 00:10:11,559
what we've done is picked up on the edge

359
00:10:11,759 --> 00:10:12,359
of this

360
00:10:12,559 --> 00:10:14,599
circular blob and this becomes a little

361
00:10:14,799 --> 00:10:16,599
bit more interesting if we

362
00:10:16,799 --> 00:10:18,359
take something that's different than the

363
00:10:18,559 --> 00:10:20,039
disc and we have you know another very

364
00:10:20,240 --> 00:10:22,679
pixelated image like mario in here

365
00:10:22,879 --> 00:10:24,599
so here again we're doing the same thing

366
00:10:24,799 --> 00:10:26,519
where we have all of the rates of change

367
00:10:26,720 --> 00:10:28,120
in the x direction we're adding them to

368
00:10:28,320 --> 00:10:29,479
all of the rates of change in the y

369
00:10:29,679 --> 00:10:30,919
direction

370
00:10:31,120 --> 00:10:32,198
and then if we just look at the

371
00:10:32,399 --> 00:10:34,359
magnitude of those gradient vectors

372
00:10:34,559 --> 00:10:37,240
it picks up on the edginess of mario and

373
00:10:37,440 --> 00:10:38,839
more than that it tells us that the

374
00:10:39,039 --> 00:10:40,279
brightest pixels are the ones where

375
00:10:40,480 --> 00:10:41,639
there's a really sharp edge

376
00:10:41,839 --> 00:10:42,839
and then the ones that are kind of a

377
00:10:43,039 --> 00:10:44,919
lighter gray are an edge but

378
00:10:45,120 --> 00:10:47,240
ones that don't correspond to as much

379
00:10:47,440 --> 00:10:48,839
contrast

380
00:10:49,039 --> 00:10:50,519
now digging into the code for what this

381
00:10:50,720 --> 00:10:52,279
is actually displaying

382
00:10:52,480 --> 00:10:55,159
you'll notice that i've got a del x and

383
00:10:55,360 --> 00:10:56,120
del y

384
00:10:56,320 --> 00:10:57,959
being defined as the partial derivatives

385
00:10:58,159 --> 00:10:59,159
of this image

386
00:10:59,360 --> 00:11:01,399
and that partial derivative function as

387
00:11:01,600 --> 00:11:02,679
i've kind of been describing

388
00:11:02,879 --> 00:11:05,000
is basically just applying sobel filters

389
00:11:05,200 --> 00:11:05,719
it takes the

390
00:11:05,919 --> 00:11:08,198
sx and sy the kernel.sobole that we were

391
00:11:08,399 --> 00:11:09,799
just looking at

392
00:11:10,000 --> 00:11:11,639
and depending on what i have toggled

393
00:11:11,839 --> 00:11:14,679
here it will populate the del x term to

394
00:11:14,879 --> 00:11:15,959
be a convolution

395
00:11:16,159 --> 00:11:17,878
of the brightness of the image with the

396
00:11:18,078 --> 00:11:20,039
sobo filter in the x direction

397
00:11:20,240 --> 00:11:23,000
and then the del y term is a convolution

398
00:11:23,200 --> 00:11:24,519
of that brightness but with the other

399
00:11:24,720 --> 00:11:25,318
filter

400
00:11:25,519 --> 00:11:26,519
so that's all the partial derivative

401
00:11:26,720 --> 00:11:27,959
functions are doing but this is just a

402
00:11:28,159 --> 00:11:29,639
nice abstraction so that we don't have

403
00:11:29,839 --> 00:11:32,279
to think of the convolution necessarily

404
00:11:32,480 --> 00:11:34,439
and you know if i have both of my

405
00:11:34,639 --> 00:11:36,039
buttons toggled here to say yes we're

406
00:11:36,240 --> 00:11:37,639
taking into account the x and the y

407
00:11:37,839 --> 00:11:38,839
direction

408
00:11:39,039 --> 00:11:40,919
what it does is it basically just takes

409
00:11:41,120 --> 00:11:43,240
the magnitude of that vector

410
00:11:43,440 --> 00:11:45,078
you know it takes the del x direction

411
00:11:45,278 --> 00:11:46,599
squared the del y direction

412
00:11:46,799 --> 00:11:48,279
squared and then the square root of all

413
00:11:48,480 --> 00:11:49,719
of that that

414
00:11:49,919 --> 00:11:51,639
is going to be the notion of importance

415
00:11:51,839 --> 00:11:54,198
that we assign to each one of our pixels

416
00:11:54,399 --> 00:11:56,359
so jumping back to our salvador dali

417
00:11:56,559 --> 00:11:57,318
example

418
00:11:57,519 --> 00:11:58,758
that's exactly what's going on with the

419
00:11:58,958 --> 00:12:00,839
image on the right and if i open up a

420
00:12:01,039 --> 00:12:02,039
little under the hood here

421
00:12:02,240 --> 00:12:03,799
you can see that we're pulling out these

422
00:12:04,000 --> 00:12:05,959
two different kernels the sobo filters

423
00:12:06,159 --> 00:12:08,438
we are taking a convolution in this case

424
00:12:08,639 --> 00:12:10,438
with the brightness of the image

425
00:12:10,639 --> 00:12:12,279
and then taking the square root of the

426
00:12:12,480 --> 00:12:14,359
sum of the squares of those values

427
00:12:14,559 --> 00:12:16,438
that's what's determining the the value

428
00:12:16,639 --> 00:12:18,039
of each pixel

429
00:12:18,240 --> 00:12:19,639
and if we scroll up a little bit we can

430
00:12:19,839 --> 00:12:21,159
see kind of all of that broken down a

431
00:12:21,360 --> 00:12:22,198
little bit more

432
00:12:22,399 --> 00:12:23,479
this image on the left is the

433
00:12:23,679 --> 00:12:25,878
convolution with the sx filter

434
00:12:26,078 --> 00:12:27,479
the one on the right is the convolution

435
00:12:27,679 --> 00:12:29,159
with the sy filter so kind of the

436
00:12:29,360 --> 00:12:31,078
edginess in the x direction edginess in

437
00:12:31,278 --> 00:12:32,599
the right direction

438
00:12:32,799 --> 00:12:34,359
but thinking back to our end goal here

439
00:12:34,559 --> 00:12:35,639
which is the

440
00:12:35,839 --> 00:12:37,240
really clever way to shrink down an

441
00:12:37,440 --> 00:12:39,240
image by cutting out the unimportant

442
00:12:39,440 --> 00:12:40,039
seams

443
00:12:40,240 --> 00:12:41,959
this still leaves an open question of

444
00:12:42,159 --> 00:12:43,878
what's the best way to find that seam

445
00:12:44,078 --> 00:12:45,479
from the top to the bottom

446
00:12:45,679 --> 00:12:47,159
find some path from the top to the

447
00:12:47,360 --> 00:12:48,919
bottom which we consider to be passing

448
00:12:49,120 --> 00:12:50,359
through the least important of all the

449
00:12:50,559 --> 00:12:51,479
pixels

450
00:12:51,679 --> 00:12:53,479
well for that again let me shift to a

451
00:12:53,679 --> 00:12:55,000
smaller example that might be a little

452
00:12:55,200 --> 00:12:56,919
bit easier to think about

453
00:12:57,120 --> 00:12:59,479
okay so here i've got a grid and i've

454
00:12:59,679 --> 00:13:01,719
associated a value with each

455
00:13:01,919 --> 00:13:03,719
element in that grid and let's say i

456
00:13:03,919 --> 00:13:06,519
want to start at this one which is 0.3

457
00:13:06,720 --> 00:13:08,359
and i want to find a path to the bottom

458
00:13:08,559 --> 00:13:10,359
that passes through the

459
00:13:10,559 --> 00:13:12,679
the lowest valued pixels now one

460
00:13:12,879 --> 00:13:14,599
approach might be a greedy algorithm

461
00:13:14,799 --> 00:13:16,599
where we look at the three below it and

462
00:13:16,799 --> 00:13:17,559
this is going to be our notion of

463
00:13:17,759 --> 00:13:19,559
connectedness is that each pixel has to

464
00:13:19,759 --> 00:13:19,799
be

465
00:13:20,000 --> 00:13:21,318
connected to one of the three below it

466
00:13:21,519 --> 00:13:23,000
you can't jump more than that we can

467
00:13:23,200 --> 00:13:24,359
talk more about what might happen if you

468
00:13:24,559 --> 00:13:26,279
try

469
00:13:26,480 --> 00:13:28,039
but if we take a greedy approach you

470
00:13:28,240 --> 00:13:29,399
would just choose the one that's the

471
00:13:29,600 --> 00:13:30,919
lowest value so in this case it would

472
00:13:31,120 --> 00:13:32,120
choose the

473
00:13:32,320 --> 00:13:34,198
the pixel with value zero and then we

474
00:13:34,399 --> 00:13:35,639
look at the three below that it would

475
00:13:35,839 --> 00:13:37,639
choose the one with 0.2

476
00:13:37,839 --> 00:13:40,519
the three below that the smallest is 0.4

477
00:13:40,720 --> 00:13:42,039
and we continue on like that and this

478
00:13:42,240 --> 00:13:42,839
would be sort of

479
00:13:43,039 --> 00:13:45,078
a greedy algorithm way of finding a seam

480
00:13:45,278 --> 00:13:45,959
down the image

481
00:13:46,159 --> 00:13:48,198
where the total value of all the pixels

482
00:13:48,399 --> 00:13:49,799
that it touches is pretty low

483
00:13:50,000 --> 00:13:51,559
and in this case if we add them all up

484
00:13:51,759 --> 00:13:53,719
it ends up being 1.3

485
00:13:53,919 --> 00:13:55,559
but the problem with greedy algorithms

486
00:13:55,759 --> 00:13:56,758
like this is that

487
00:13:56,958 --> 00:13:57,959
you can't be sure that you've actually

488
00:13:58,159 --> 00:13:59,559
found the best seam from the top to the

489
00:13:59,759 --> 00:14:00,359
bottom

490
00:14:00,559 --> 00:14:02,039
and in fact for this example it's not

491
00:14:02,240 --> 00:14:03,878
the best and we can see that with

492
00:14:04,078 --> 00:14:05,878
another much less efficient approach

493
00:14:06,078 --> 00:14:07,559
where we search through all possible

494
00:14:07,759 --> 00:14:09,559
paths from the top to the bottom

495
00:14:09,759 --> 00:14:11,399
and then we consider the sum of the

496
00:14:11,600 --> 00:14:13,959
values that it passes through each one

497
00:14:14,159 --> 00:14:15,078
and we're just going to keep track of

498
00:14:15,278 --> 00:14:16,998
which one is the lowest after searching

499
00:14:17,198 --> 00:14:17,878
through them all

500
00:14:18,078 --> 00:14:19,479
so here it searched through them all in

501
00:14:19,679 --> 00:14:20,919
this small example there were around i

502
00:14:21,120 --> 00:14:22,758
think 200 examples it had to search

503
00:14:22,958 --> 00:14:23,479
through

504
00:14:23,679 --> 00:14:25,559
and it found one that isn't the greedy

505
00:14:25,759 --> 00:14:27,318
algorithm notice as it goes from the

506
00:14:27,519 --> 00:14:29,399
first pixel from the first row down to

507
00:14:29,600 --> 00:14:30,919
the next row it doesn't take the

508
00:14:31,120 --> 00:14:33,159
smallest choice it takes that 0.1

509
00:14:33,360 --> 00:14:34,599
because that gives it access to much

510
00:14:34,799 --> 00:14:36,599
lower values on the way down

511
00:14:36,799 --> 00:14:39,559
and here it was a total of 0.6 in

512
00:14:39,759 --> 00:14:40,279
contrast

513
00:14:40,480 --> 00:14:42,919
to the 1.3 that we had from the other

514
00:14:43,120 --> 00:14:44,438
example

515
00:14:44,639 --> 00:14:45,878
but if you start to think about

516
00:14:46,078 --> 00:14:47,639
computational complexity on doing a

517
00:14:47,839 --> 00:14:49,078
tactic like this where we're searching

518
00:14:49,278 --> 00:14:49,399
through

519
00:14:49,600 --> 00:14:51,078
every possible path from the top to the

520
00:14:51,278 --> 00:14:52,679
bottom remember

521
00:14:52,879 --> 00:14:54,599
each step involves three different

522
00:14:54,799 --> 00:14:56,599
choices so you're taking

523
00:14:56,799 --> 00:14:58,758
basically 3 to the power n where n is

524
00:14:58,958 --> 00:15:00,039
the number of rows

525
00:15:00,240 --> 00:15:02,120
that's going to be on the order of the

526
00:15:02,320 --> 00:15:04,279
number of steps that you have to take

527
00:15:04,480 --> 00:15:06,359
which for any reasonably sized image is

528
00:15:06,559 --> 00:15:08,919
going to be completely untenable

529
00:15:09,120 --> 00:15:11,240
but if we notice what's actually going

530
00:15:11,440 --> 00:15:12,919
on here there's a lot of repeated

531
00:15:13,120 --> 00:15:14,839
computation in doing all of these

532
00:15:15,039 --> 00:15:16,279
so for example while it's searching

533
00:15:16,480 --> 00:15:18,120
through these paths you know on this one

534
00:15:18,320 --> 00:15:19,078
it has to add up

535
00:15:19,278 --> 00:15:22,679
0.3 plus 0.0 plus 0.4 plus 0.0

536
00:15:22,879 --> 00:15:25,878
on and on and then on the next one it

537
00:15:26,078 --> 00:15:26,438
takes

538
00:15:26,639 --> 00:15:28,198
pretty much the same sum but it's only

539
00:15:28,399 --> 00:15:29,639
changing that last part

540
00:15:29,839 --> 00:15:31,959
and then on the next step it again has

541
00:15:32,159 --> 00:15:33,318
pretty much the same sum for the

542
00:15:33,519 --> 00:15:33,959
beginning

543
00:15:34,159 --> 00:15:36,279
with just changes at the end so going

544
00:15:36,480 --> 00:15:37,719
through all of these and redoing that

545
00:15:37,919 --> 00:15:38,120
sum

546
00:15:38,320 --> 00:15:40,198
every single time is clearly pretty

547
00:15:40,399 --> 00:15:41,799
inefficient there is a lot of room for

548
00:15:42,000 --> 00:15:42,919
improvement here

549
00:15:43,120 --> 00:15:44,438
so the actual algorithm that we're going

550
00:15:44,639 --> 00:15:46,758
to use which falls into a family of what

551
00:15:46,958 --> 00:15:48,438
we might call dynamic programming

552
00:15:48,639 --> 00:15:50,519
will make an effort to memorize some of

553
00:15:50,720 --> 00:15:52,839
the sums that it needs along the way

554
00:15:53,039 --> 00:15:54,359
so that it doesn't have to recompute

555
00:15:54,559 --> 00:15:55,959
things needlessly

556
00:15:56,159 --> 00:15:58,120
so pulling up the very last animation

557
00:15:58,320 --> 00:15:59,878
here before we jump back to the notebook

558
00:16:00,078 --> 00:16:01,719
i'm going to have that grid of values on

559
00:16:01,919 --> 00:16:03,318
the left and for lack of a better term

560
00:16:03,519 --> 00:16:05,078
some people often just call these

561
00:16:05,278 --> 00:16:06,679
values the energy so we're trying to

562
00:16:06,879 --> 00:16:08,998
find a path of minimal energy

563
00:16:09,198 --> 00:16:10,519
and on the right the goal is going to be

564
00:16:10,720 --> 00:16:12,359
to populate this in a way where

565
00:16:12,559 --> 00:16:14,758
each value will tell us the minimum

566
00:16:14,958 --> 00:16:16,519
possible total energy

567
00:16:16,720 --> 00:16:19,240
of some path towards the bottom so for

568
00:16:19,440 --> 00:16:19,799
example

569
00:16:20,000 --> 00:16:22,279
this 1.7 at the top is telling us no

570
00:16:22,480 --> 00:16:23,878
matter what path we choose to get

571
00:16:24,078 --> 00:16:24,998
towards the bottom

572
00:16:25,198 --> 00:16:26,599
it has to have a total energy of at

573
00:16:26,799 --> 00:16:28,039
least 1.7

574
00:16:28,240 --> 00:16:29,318
so you know maybe it involves taking

575
00:16:29,519 --> 00:16:31,878
this 0.4 plus 0.4 plus 0.2

576
00:16:32,078 --> 00:16:33,399
on and on it's something that's

577
00:16:33,600 --> 00:16:35,399
relatively high whereas

578
00:16:35,600 --> 00:16:38,120
this little value here this 0.3 tells us

579
00:16:38,320 --> 00:16:39,799
there's some path from this pixel

580
00:16:40,000 --> 00:16:40,758
towards the bottom

581
00:16:40,958 --> 00:16:43,799
where the sum cumulative energy is 0.3

582
00:16:44,000 --> 00:16:45,799
and looking over at the corresponding

583
00:16:46,000 --> 00:16:47,318
point we can probably see what that path

584
00:16:47,519 --> 00:16:49,959
is it's this 0.1 plus 0 plus 0 plus 0

585
00:16:50,159 --> 00:16:52,758
plus 0.2 now as far as how we actually

586
00:16:52,958 --> 00:16:54,359
form this we do it from the bottom to

587
00:16:54,559 --> 00:16:55,318
the top

588
00:16:55,519 --> 00:16:57,639
so the first step is going to be to

589
00:16:57,839 --> 00:16:59,240
simply copy that bottom row

590
00:16:59,440 --> 00:17:01,240
since once you're at the bottom that's

591
00:17:01,440 --> 00:17:02,519
the best that you can do whatever the

592
00:17:02,720 --> 00:17:03,878
energy of the pixel that you're on

593
00:17:04,078 --> 00:17:05,960
that's going to be the minimal total

594
00:17:06,160 --> 00:17:09,159
path and then for each pixel above it

595
00:17:09,359 --> 00:17:11,399
all we do is say what's the smallest

596
00:17:11,599 --> 00:17:12,838
number below you

597
00:17:13,038 --> 00:17:15,239
and then i'm going to add the new energy

598
00:17:15,439 --> 00:17:16,838
of the new pixel that i'm on

599
00:17:17,038 --> 00:17:20,279
plus the minimal energy below it

600
00:17:20,480 --> 00:17:21,799
so you know maybe i'll scoot over to a

601
00:17:22,000 --> 00:17:24,279
more interesting example like this one

602
00:17:24,480 --> 00:17:26,118
where it's got three possible energies

603
00:17:26,318 --> 00:17:27,878
below it point two point five and point

604
00:17:28,078 --> 00:17:28,680
three

605
00:17:28,880 --> 00:17:30,119
obviously the step that it would choose

606
00:17:30,319 --> 00:17:32,200
to take is to get to that point two

607
00:17:32,400 --> 00:17:34,440
and to get the new cumulative energy we

608
00:17:34,640 --> 00:17:36,119
take the energy of that corresponding

609
00:17:36,319 --> 00:17:37,719
pixel which is point two and that gives

610
00:17:37,919 --> 00:17:39,079
us that point four

611
00:17:39,279 --> 00:17:40,919
and so that's how we fill out that row

612
00:17:41,119 --> 00:17:42,680
and then we do precisely the same thing

613
00:17:42,880 --> 00:17:43,879
for the next row

614
00:17:44,079 --> 00:17:47,159
so let me jump to another maybe

615
00:17:47,359 --> 00:17:47,879
interesting

616
00:17:48,079 --> 00:17:50,119
this is a sufficiently interesting pixel

617
00:17:50,319 --> 00:17:51,240
so this one

618
00:17:51,440 --> 00:17:53,079
we see that it's got three choices for

619
00:17:53,279 --> 00:17:54,279
where to hop below it

620
00:17:54,480 --> 00:17:55,879
and now it's not looking at the energy

621
00:17:56,079 --> 00:17:57,960
of the pixels below it but it's saying

622
00:17:58,160 --> 00:18:00,119
it once i get to that pixel below me

623
00:18:00,319 --> 00:18:01,240
what's going to be the sum

624
00:18:01,440 --> 00:18:03,240
total energy of the minimal path to the

625
00:18:03,440 --> 00:18:04,759
bottom from there

626
00:18:04,960 --> 00:18:06,519
so in this case the best option would be

627
00:18:06,720 --> 00:18:08,838
this point two and then we add that to

628
00:18:09,038 --> 00:18:10,200
the value of the pixel which is

629
00:18:10,400 --> 00:18:12,838
zero and we get that point two so we

630
00:18:13,038 --> 00:18:14,358
keep doing this iteratively on the way

631
00:18:14,558 --> 00:18:14,680
up

632
00:18:14,880 --> 00:18:17,000
and what it means is the number of steps

633
00:18:17,200 --> 00:18:17,879
required

634
00:18:18,079 --> 00:18:20,039
is just three times the total number of

635
00:18:20,240 --> 00:18:21,479
pixels in the image

636
00:18:21,679 --> 00:18:23,159
which is dramatically better than the

637
00:18:23,359 --> 00:18:24,680
three to the end that we were getting by

638
00:18:24,880 --> 00:18:25,319
doing the

639
00:18:25,519 --> 00:18:27,319
uh exhaustive global search the

640
00:18:27,519 --> 00:18:28,440
inefficient way

641
00:18:28,640 --> 00:18:30,279
but this still gives us a way of finding

642
00:18:30,480 --> 00:18:32,440
the globally optimum choice for a path

643
00:18:32,640 --> 00:18:34,039
from the top to the bottom

644
00:18:34,240 --> 00:18:35,399
because for example let's say i'm

645
00:18:35,599 --> 00:18:37,319
starting from the

646
00:18:37,519 --> 00:18:38,759
pixel we were looking at earlier this

647
00:18:38,960 --> 00:18:40,440
0.31

648
00:18:40,640 --> 00:18:41,879
all i have to do is look at that and

649
00:18:42,079 --> 00:18:43,639
with each step on the way down

650
00:18:43,839 --> 00:18:45,559
simply go to the lowest so i go to the

651
00:18:45,759 --> 00:18:47,479
lowest neighbor here that 0.3

652
00:18:47,679 --> 00:18:49,799
the lowest neighbor there that 0.2 and

653
00:18:50,000 --> 00:18:50,838
keep doing that

654
00:18:51,038 --> 00:18:52,598
and what i'll find is a minimal path

655
00:18:52,798 --> 00:18:54,680
which you'll notice that 0.6 should be

656
00:18:54,880 --> 00:18:55,879
familiar from

657
00:18:56,079 --> 00:18:57,559
what our globally exhaustive search

658
00:18:57,759 --> 00:18:59,240
doing it the inefficient way ended up

659
00:18:59,440 --> 00:18:59,719
finding

660
00:18:59,919 --> 00:19:01,000
after it looked through all of them and

661
00:19:01,200 --> 00:19:03,079
did all of these computations it sniffed

662
00:19:03,279 --> 00:19:04,119
out the one that was

663
00:19:04,319 --> 00:19:07,559
in fact total energy 0.6 so that's what

664
00:19:07,759 --> 00:19:09,159
we might call the dynamic programming

665
00:19:09,359 --> 00:19:10,519
approach where it's kind of keeping

666
00:19:10,720 --> 00:19:12,279
track of values on the way not having to

667
00:19:12,480 --> 00:19:13,719
redo computations

668
00:19:13,919 --> 00:19:15,000
and let's see what it looks like in the

669
00:19:15,200 --> 00:19:17,000
context of our notebook so what we're

670
00:19:17,200 --> 00:19:18,759
going to do is look at each pixel

671
00:19:18,960 --> 00:19:21,479
and ask hey what is the path with least

672
00:19:21,679 --> 00:19:22,039
total

673
00:19:22,240 --> 00:19:23,879
energy towards the bottom and in this

674
00:19:24,079 --> 00:19:25,639
context what we mean by energy is the

675
00:19:25,839 --> 00:19:27,479
edginess of that pixel measured with the

676
00:19:27,679 --> 00:19:29,559
gradient like i was just describing

677
00:19:29,759 --> 00:19:31,799
so if you say hey what's the uh minimal

678
00:19:32,000 --> 00:19:33,799
total energy for some path from

679
00:19:34,000 --> 00:19:35,559
this particular pixel towards the bottom

680
00:19:35,759 --> 00:19:37,159
and then you assign it a color

681
00:19:37,359 --> 00:19:39,960
this is what we get so just to be clear

682
00:19:40,160 --> 00:19:41,559
this image right here is kind of the

683
00:19:41,759 --> 00:19:42,680
scaled up version

684
00:19:42,880 --> 00:19:44,680
in the context of the melting clocks

685
00:19:44,880 --> 00:19:46,440
image of what we were building up in a

686
00:19:46,640 --> 00:19:47,879
much smaller example

687
00:19:48,079 --> 00:19:49,799
over here from bottom to top where the

688
00:19:50,000 --> 00:19:51,960
pixels which are increasingly teal

689
00:19:52,160 --> 00:19:53,879
are the ones that don't really have a

690
00:19:54,079 --> 00:19:55,559
good path from the top to the bottom

691
00:19:55,759 --> 00:19:57,960
so to speak so over here in our notebook

692
00:19:58,160 --> 00:19:59,240
everything which is a really bright

693
00:19:59,440 --> 00:19:59,799
pixel

694
00:20:00,000 --> 00:20:02,358
is kind of screaming out do not touch me

695
00:20:02,558 --> 00:20:04,119
if you have a seam that ends up where i

696
00:20:04,319 --> 00:20:04,919
am right now

697
00:20:05,119 --> 00:20:06,358
there's going to be no way towards the

698
00:20:06,558 --> 00:20:08,358
bottom that doesn't involve cutting out

699
00:20:08,558 --> 00:20:10,119
things that we want to keep

700
00:20:10,319 --> 00:20:11,879
so if we you know compare this to the

701
00:20:12,079 --> 00:20:14,200
actual image that we have

702
00:20:14,400 --> 00:20:15,719
you'll notice that we get these kind of

703
00:20:15,919 --> 00:20:18,039
triangle shapes above all of the content

704
00:20:18,240 --> 00:20:21,000
so above the strange monster creature

705
00:20:21,200 --> 00:20:22,200
here

706
00:20:22,400 --> 00:20:23,719
we have these triangles which is a way

707
00:20:23,919 --> 00:20:25,799
of saying don't let a scene get into

708
00:20:26,000 --> 00:20:26,598
this point

709
00:20:26,798 --> 00:20:28,598
because once it gets there any path

710
00:20:28,798 --> 00:20:30,039
towards the bottom of the image

711
00:20:30,240 --> 00:20:32,039
will have to pass through something

712
00:20:32,240 --> 00:20:33,879
which is full of edges something which

713
00:20:34,079 --> 00:20:35,319
has high energy something that we don't

714
00:20:35,519 --> 00:20:36,680
want to get rid of

715
00:20:36,880 --> 00:20:37,879
you'll be going through more of the

716
00:20:38,079 --> 00:20:39,319
implementation details in the next

717
00:20:39,519 --> 00:20:41,079
lecture with a live coding session

718
00:20:41,279 --> 00:20:42,759
featuring the great the one and only

719
00:20:42,960 --> 00:20:44,119
james schloss

720
00:20:44,319 --> 00:20:46,119
but for right now let's actually take a

721
00:20:46,319 --> 00:20:47,799
little bit of a peek behind the hood to

722
00:20:48,000 --> 00:20:50,759
see what's going on in generating this

723
00:20:50,960 --> 00:20:53,079
this array of values which again is

724
00:20:53,279 --> 00:20:54,759
exactly what we were looking at

725
00:20:54,960 --> 00:20:56,119
with this animation over here where

726
00:20:56,319 --> 00:20:57,879
we're kind of going from the bottom to

727
00:20:58,079 --> 00:20:58,838
the top

728
00:20:59,038 --> 00:21:01,319
thinking term by term building up values

729
00:21:01,519 --> 00:21:02,119
based on

730
00:21:02,319 --> 00:21:04,358
just adding the energy of a given pixel

731
00:21:04,558 --> 00:21:05,479
with whatever the

732
00:21:05,679 --> 00:21:07,639
minimal term sitting right below it was

733
00:21:07,839 --> 00:21:08,838
but let's let's think through that in

734
00:21:09,038 --> 00:21:10,200
more detail

735
00:21:10,400 --> 00:21:12,200
so we've got this function here which is

736
00:21:12,400 --> 00:21:13,799
trying to find the uh

737
00:21:14,000 --> 00:21:16,119
the least edgy path you know the least

738
00:21:16,319 --> 00:21:17,240
edgy values

739
00:21:17,440 --> 00:21:19,719
for a given array of energies or

740
00:21:19,919 --> 00:21:21,559
edginess or whatever we want to consider

741
00:21:21,759 --> 00:21:23,959
e to represent here so we start by

742
00:21:24,159 --> 00:21:25,639
creating array of zeros with the same

743
00:21:25,839 --> 00:21:26,598
size

744
00:21:26,798 --> 00:21:28,039
and then we're also actually going to

745
00:21:28,240 --> 00:21:29,959
keep track of the directions so

746
00:21:30,159 --> 00:21:31,639
what direction should we step from each

747
00:21:31,839 --> 00:21:33,959
pixel to get to that optimal path

748
00:21:34,159 --> 00:21:35,719
that actually makes it so that we can

749
00:21:35,919 --> 00:21:37,719
draw one of these seams

750
00:21:37,919 --> 00:21:39,159
now if you'll remember the very first

751
00:21:39,359 --> 00:21:41,159
step before we did any of the

752
00:21:41,359 --> 00:21:43,559
recursive looks was to copy whatever the

753
00:21:43,759 --> 00:21:45,879
bottom row in the energy matrix was

754
00:21:46,079 --> 00:21:47,399
over to this new one that we're

755
00:21:47,599 --> 00:21:49,240
generating and so that's exactly what we

756
00:21:49,440 --> 00:21:50,279
do here we take

757
00:21:50,480 --> 00:21:52,838
whatever that bottom row is for e and we

758
00:21:53,038 --> 00:21:55,240
fill that into the least e matrix

759
00:21:55,440 --> 00:21:56,759
from there we have a loop that goes from

760
00:21:56,960 --> 00:21:58,440
the bottom to the top and then we're

761
00:21:58,640 --> 00:22:00,759
going to go from the left to the right

762
00:22:00,960 --> 00:22:02,358
and essentially what we're doing here is

763
00:22:02,558 --> 00:22:04,519
we're just finding the minimal value

764
00:22:04,720 --> 00:22:06,598
from the least e matrix that we've

765
00:22:06,798 --> 00:22:07,799
already been building

766
00:22:08,000 --> 00:22:09,319
and then we add that together with the

767
00:22:09,519 --> 00:22:11,000
corresponding energy value

768
00:22:11,200 --> 00:22:14,200
of the of the original matrix and then

769
00:22:14,400 --> 00:22:15,799
what we're also doing is keeping track

770
00:22:16,000 --> 00:22:16,919
of the directions

771
00:22:17,119 --> 00:22:18,759
so for example if we were to pop over

772
00:22:18,960 --> 00:22:20,039
here and we imagine while we're

773
00:22:20,240 --> 00:22:21,240
populating this

774
00:22:21,440 --> 00:22:23,879
you know we're populating let's say yeah

775
00:22:24,079 --> 00:22:25,079
this pixel here

776
00:22:25,279 --> 00:22:26,919
so it looks at the 3 below it it sees

777
00:22:27,119 --> 00:22:28,358
that 0.2

778
00:22:28,558 --> 00:22:30,680
is the smallest one we want to remember

779
00:22:30,880 --> 00:22:32,119
that that's the direction it's going to

780
00:22:32,319 --> 00:22:32,759
walk

781
00:22:32,960 --> 00:22:34,119
and so here we're going to assign an

782
00:22:34,319 --> 00:22:35,879
index of negative 1 0

783
00:22:36,079 --> 00:22:38,039
and 1 for the three possible directions

784
00:22:38,240 --> 00:22:40,200
that you can step as you go down

785
00:22:40,400 --> 00:22:43,240
and we're filling out this matrix of

786
00:22:43,440 --> 00:22:45,799
directions what we're calling dirs and

787
00:22:46,000 --> 00:22:47,479
what this line says is essentially fill

788
00:22:47,679 --> 00:22:49,479
it either with a negative one a zero or

789
00:22:49,679 --> 00:22:50,279
a one

790
00:22:50,480 --> 00:22:52,279
depending on what the minimal value that

791
00:22:52,480 --> 00:22:54,598
we found was

792
00:22:54,798 --> 00:22:56,440
so once we've built up this matrix of

793
00:22:56,640 --> 00:22:58,119
directions we could actually

794
00:22:58,319 --> 00:22:59,479
visualize it with a bunch of little

795
00:22:59,679 --> 00:23:01,240
arrows if you wanted so this is what

796
00:23:01,440 --> 00:23:02,200
comes out from

797
00:23:02,400 --> 00:23:04,680
a sub-portion of the salvador dali image

798
00:23:04,880 --> 00:23:06,279
where we're stepping either a little bit

799
00:23:06,480 --> 00:23:08,598
tone to the left a little bit down

800
00:23:08,798 --> 00:23:10,039
in the pure direction or down to the

801
00:23:10,240 --> 00:23:12,358
right and that effectively is the same

802
00:23:12,558 --> 00:23:13,719
as having seams for

803
00:23:13,919 --> 00:23:16,358
our image so over here we've got another

804
00:23:16,558 --> 00:23:17,319
little slider

805
00:23:17,519 --> 00:23:19,559
which is basically telling us what is

806
00:23:19,759 --> 00:23:21,319
the best possible seam

807
00:23:21,519 --> 00:23:23,159
from a given pixel on the top towards

808
00:23:23,359 --> 00:23:24,838
the bottom and it's using that

809
00:23:25,038 --> 00:23:26,119
directions matrix

810
00:23:26,319 --> 00:23:27,879
and you'll notice on the right what it's

811
00:23:28,079 --> 00:23:29,319
passing through are all of the

812
00:23:29,519 --> 00:23:32,680
darkest pixels right it's the ones that

813
00:23:32,880 --> 00:23:35,479
involve low energy so as we kind of play

814
00:23:35,679 --> 00:23:37,159
with the slider and walk it across

815
00:23:37,359 --> 00:23:39,000
it's showing us the best paths from top

816
00:23:39,200 --> 00:23:41,159
to bottom that hit low energy pixels

817
00:23:41,359 --> 00:23:41,799
which again

818
00:23:42,000 --> 00:23:44,279
means hitting ones that don't have edges

819
00:23:44,480 --> 00:23:46,358
which is the metric that we're using for

820
00:23:46,558 --> 00:23:47,719
whether or not we want to include a

821
00:23:47,919 --> 00:23:49,559
pixel and so that

822
00:23:49,759 --> 00:23:51,399
effectively is the algorithm once you

823
00:23:51,599 --> 00:23:53,000
have these seams you choose the seam

824
00:23:53,200 --> 00:23:54,598
with the smallest possible energy

825
00:23:54,798 --> 00:23:56,838
and with each step you snip that out of

826
00:23:57,038 --> 00:23:57,719
the image

827
00:23:57,919 --> 00:23:59,240
and as you snip more and more of them

828
00:23:59,440 --> 00:24:02,519
out we get a narrower and narrower image

829
00:24:02,720 --> 00:24:06,240
but it's kept all of the content

830
00:24:06,400 --> 00:24:07,959
now this works particularly well for our

831
00:24:08,159 --> 00:24:09,639
melting clocks image but i want to show

832
00:24:09,839 --> 00:24:10,440
you an example

833
00:24:10,640 --> 00:24:12,759
where this fails what are the times

834
00:24:12,960 --> 00:24:13,719
where cutting out the

835
00:24:13,919 --> 00:24:16,279
non-edgy pixels might not actually give

836
00:24:16,480 --> 00:24:17,639
us something that's

837
00:24:17,839 --> 00:24:20,279
visually what we're going for so i think

838
00:24:20,480 --> 00:24:22,119
one good example here would be

839
00:24:22,319 --> 00:24:24,519
looking at starry night because just

840
00:24:24,720 --> 00:24:26,838
based on the style of this painting

841
00:24:27,038 --> 00:24:28,279
all of the stuff in the background

842
00:24:28,480 --> 00:24:29,479
pretty much all of the things in the

843
00:24:29,679 --> 00:24:30,200
image

844
00:24:30,400 --> 00:24:32,279
are edges there's a lot of changing in

845
00:24:32,480 --> 00:24:34,200
color as you move a little bit from

846
00:24:34,400 --> 00:24:35,319
point to point

847
00:24:35,519 --> 00:24:38,039
and we can see this when we do our two

848
00:24:38,240 --> 00:24:39,559
different filters and compute our two

849
00:24:39,759 --> 00:24:41,000
different gradients

850
00:24:41,200 --> 00:24:43,240
in this case it's just tons of edges

851
00:24:43,440 --> 00:24:44,279
left and right

852
00:24:44,480 --> 00:24:45,959
and when we put them together to get our

853
00:24:46,159 --> 00:24:47,959
pencil sketch we see that

854
00:24:48,159 --> 00:24:50,598
the background you know the sky is full

855
00:24:50,798 --> 00:24:51,159
of

856
00:24:51,359 --> 00:24:52,919
whiteness it's full of high energy

857
00:24:53,119 --> 00:24:54,200
things that we would potentially

858
00:24:54,400 --> 00:24:57,319
not want to remove so when we build up

859
00:24:57,519 --> 00:24:59,559
that matrix with our dynamic programming

860
00:24:59,759 --> 00:25:00,680
approach that says

861
00:25:00,880 --> 00:25:02,919
what should i not be touching almost

862
00:25:03,119 --> 00:25:04,598
everything in the sky in that actual

863
00:25:04,798 --> 00:25:05,240
background

864
00:25:05,440 --> 00:25:07,159
it seems to want to avoid and the one

865
00:25:07,359 --> 00:25:09,399
region that it seems okay going through

866
00:25:09,599 --> 00:25:11,240
is what actually sits more in the

867
00:25:11,440 --> 00:25:12,759
foreground of the image this

868
00:25:12,960 --> 00:25:15,559
sort of bush figure and when we actually

869
00:25:15,759 --> 00:25:16,759
apply the seam carving

870
00:25:16,960 --> 00:25:18,838
you can see that in action we can see

871
00:25:19,038 --> 00:25:20,680
how

872
00:25:20,880 --> 00:25:22,919
the slices that it wants to take out

873
00:25:23,119 --> 00:25:25,000
disproportionately include that dark

874
00:25:25,200 --> 00:25:27,319
foreground image simply because it has

875
00:25:27,519 --> 00:25:28,919
fewer edges than a lot of the things in

876
00:25:29,119 --> 00:25:29,959
the background

877
00:25:30,159 --> 00:25:31,159
so for something like this the

878
00:25:31,359 --> 00:25:33,078
performance it still produces something

879
00:25:33,278 --> 00:25:34,519
pretty but maybe it's a little bit less

880
00:25:34,720 --> 00:25:35,799
impressive if our goal is

881
00:25:36,000 --> 00:25:37,799
not to distort the objects within the

882
00:25:38,000 --> 00:25:39,639
image but that doesn't mean this whole

883
00:25:39,839 --> 00:25:41,078
algorithm is out the window what it

884
00:25:41,278 --> 00:25:41,799
means is that

885
00:25:42,000 --> 00:25:43,399
the energy function that you're

886
00:25:43,599 --> 00:25:44,919
assigning the way that you're putting

887
00:25:45,119 --> 00:25:46,919
importance to each pixel might need to

888
00:25:47,119 --> 00:25:48,598
change but then you can apply the same

889
00:25:48,798 --> 00:25:50,519
basic idea of finding seams

890
00:25:50,720 --> 00:25:52,440
using this dynamic programming approach

891
00:25:52,640 --> 00:25:55,000
and cutting them out step by step

892
00:25:55,200 --> 00:25:56,519
now just to finish things off i wanted

893
00:25:56,720 --> 00:25:58,200
to show you a couple interesting points

894
00:25:58,400 --> 00:25:59,319
from the original paper

895
00:25:59,519 --> 00:26:01,799
on this on this topic this idea of seam

896
00:26:02,000 --> 00:26:02,680
carving

897
00:26:02,880 --> 00:26:04,279
you might wonder what happens if instead

898
00:26:04,480 --> 00:26:06,039
of finding a nice seam from the top to

899
00:26:06,240 --> 00:26:06,680
the bottom

900
00:26:06,880 --> 00:26:08,598
you just choose the lowest energy pixel

901
00:26:08,798 --> 00:26:10,519
from each row you know potentially that

902
00:26:10,720 --> 00:26:11,639
should take out

903
00:26:11,839 --> 00:26:13,399
an even less interesting subset of the

904
00:26:13,599 --> 00:26:15,000
image as you carve down

905
00:26:15,200 --> 00:26:16,680
but if you do that what you end up

906
00:26:16,880 --> 00:26:18,200
getting is what's in this

907
00:26:18,400 --> 00:26:20,838
image e here where it shifts all of the

908
00:26:21,038 --> 00:26:22,200
things left to right so it doesn't

909
00:26:22,400 --> 00:26:24,680
actually keep the objects intact at all

910
00:26:24,880 --> 00:26:26,119
you might also wonder if instead of

911
00:26:26,319 --> 00:26:27,959
choosing the seam which is able to step

912
00:26:28,159 --> 00:26:29,719
either down and to the left down or down

913
00:26:29,919 --> 00:26:30,440
into the right

914
00:26:30,640 --> 00:26:32,119
if you just choose the columns which are

915
00:26:32,319 --> 00:26:35,240
the least interesting the least edgy

916
00:26:35,440 --> 00:26:36,598
and in that context what you get is

917
00:26:36,798 --> 00:26:38,598
something that again it kind of looks

918
00:26:38,798 --> 00:26:40,039
okay but you have these

919
00:26:40,240 --> 00:26:41,719
strange artifacts along the way that

920
00:26:41,919 --> 00:26:43,000
make it pretty clear that you've messed

921
00:26:43,200 --> 00:26:45,000
with the image somehow

922
00:26:45,200 --> 00:26:46,919
but i think the most fun thing from this

923
00:26:47,119 --> 00:26:48,759
paper was when they talked about

924
00:26:48,960 --> 00:26:51,000
potentially extending it where let's say

925
00:26:51,200 --> 00:26:51,799
you

926
00:26:52,000 --> 00:26:53,799
have some kind of image where you want

927
00:26:54,000 --> 00:26:55,159
to get rid of part of it

928
00:26:55,359 --> 00:26:58,200
and in this example presumably this was

929
00:26:58,400 --> 00:26:59,639
someone's ex-girlfriend or something

930
00:26:59,839 --> 00:27:00,759
like that and he wants to

931
00:27:00,960 --> 00:27:02,759
remove that part of the image well if

932
00:27:02,960 --> 00:27:04,279
you have any kind of

933
00:27:04,480 --> 00:27:06,279
user interface that lets you manually

934
00:27:06,480 --> 00:27:08,519
assign low importance to some of the

935
00:27:08,720 --> 00:27:09,399
pixels

936
00:27:09,599 --> 00:27:11,078
which is to say low energy to some of

937
00:27:11,278 --> 00:27:12,598
the pixels so you might go and

938
00:27:12,798 --> 00:27:14,119
manually decide which part you want to

939
00:27:14,319 --> 00:27:16,279
remove and maybe assign high energy to

940
00:27:16,480 --> 00:27:17,559
parts that you want to keep like the

941
00:27:17,759 --> 00:27:18,519
original

942
00:27:18,720 --> 00:27:20,680
person in here then if you do that same

943
00:27:20,880 --> 00:27:22,279
seam carving idea and you shrink the

944
00:27:22,480 --> 00:27:23,159
image down

945
00:27:23,359 --> 00:27:24,919
it will get rid of the specific

946
00:27:25,119 --> 00:27:26,358
subsection of the image that you want it

947
00:27:26,558 --> 00:27:26,759
to

948
00:27:26,960 --> 00:27:28,598
and still leave it looking pretty

949
00:27:28,798 --> 00:27:30,119
similar it doesn't really seem like

950
00:27:30,319 --> 00:27:31,799
there was a sharp cut that happened in

951
00:27:32,000 --> 00:27:32,598
this one

952
00:27:32,798 --> 00:27:34,119
which i found kind of an interesting

953
00:27:34,319 --> 00:27:36,039
application

954
00:27:36,240 --> 00:27:38,598
okay so that's it for today and then in

955
00:27:38,798 --> 00:27:39,719
some of the other lectures you're going

956
00:27:39,919 --> 00:27:40,838
to look into

957
00:27:41,038 --> 00:27:42,358
more of the implementation details

958
00:27:42,558 --> 00:27:44,519
behind this and also how to make it run

959
00:27:44,720 --> 00:27:46,119
as efficiently as you can where's the

960
00:27:46,319 --> 00:27:51,319
low-hanging fruit there

