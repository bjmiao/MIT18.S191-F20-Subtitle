1
00:00:00,560 --> 00:00:03,079
so now that we have types we want to be

2
00:00:03,279 --> 00:00:04,439
able to write functions

3
00:00:04,639 --> 00:00:07,158
that act on those types so for example

4
00:00:07,359 --> 00:00:08,120
we want to write

5
00:00:08,320 --> 00:00:11,000
a width function which can take a

6
00:00:11,199 --> 00:00:13,880
rectangle object and return me its width

7
00:00:14,080 --> 00:00:15,720
but i don't want the width function to

8
00:00:15,919 --> 00:00:18,679
work on a complex number or an integer

9
00:00:18,879 --> 00:00:21,159
so how can we do that we actually write

10
00:00:21,359 --> 00:00:22,600
a function like this

11
00:00:22,800 --> 00:00:25,640
width of r but i give this type

12
00:00:25,839 --> 00:00:26,440
annotation

13
00:00:26,640 --> 00:00:29,318
this type annotation operator is this

14
00:00:29,518 --> 00:00:29,800
two

15
00:00:30,000 --> 00:00:32,919
colons next to each other our colon

16
00:00:33,119 --> 00:00:34,679
colon rectangle

17
00:00:34,880 --> 00:00:38,119
means that this width function takes one

18
00:00:38,320 --> 00:00:39,799
parameter called r

19
00:00:40,000 --> 00:00:42,599
and that r has to be of type rectangle

20
00:00:42,799 --> 00:00:43,959
for this particular

21
00:00:44,159 --> 00:00:46,439
version of the width function so then

22
00:00:46,640 --> 00:00:48,198
it's just a standard function definition

23
00:00:48,399 --> 00:00:48,919
in julia

24
00:00:49,119 --> 00:00:50,919
here i've used the short form of a

25
00:00:51,119 --> 00:00:52,518
function definition

26
00:00:52,719 --> 00:00:55,640
and then i can run that on this r

27
00:00:55,840 --> 00:00:57,878
object and i see that it returns its

28
00:00:58,079 --> 00:01:00,998
width but if i try and run that function

29
00:01:01,198 --> 00:01:03,799
on for example the number three then i

30
00:01:04,000 --> 00:01:05,560
get an error it tells me there is no

31
00:01:05,760 --> 00:01:07,159
method that matches

32
00:01:07,359 --> 00:01:10,840
with and here you see colon colon in 64.

33
00:01:11,040 --> 00:01:13,079
in other words there is no version of

34
00:01:13,280 --> 00:01:14,039
this function which

35
00:01:14,239 --> 00:01:17,399
can receive a single integer because i

36
00:01:17,599 --> 00:01:18,519
have not defined

37
00:01:18,719 --> 00:01:22,039
any method that does that and so that is

38
00:01:22,239 --> 00:01:24,039
the way that you can prevent

39
00:01:24,239 --> 00:01:27,319
people calling your code with objects

40
00:01:27,519 --> 00:01:28,519
that do not

41
00:01:28,719 --> 00:01:31,399
belong in there on the other hand it's

42
00:01:31,599 --> 00:01:32,679
very common in julia

43
00:01:32,879 --> 00:01:34,759
to have specialized versions of

44
00:01:34,959 --> 00:01:37,000
functions that work on certain types

45
00:01:37,200 --> 00:01:39,399
and general or generic versions that

46
00:01:39,599 --> 00:01:41,079
work on any type

47
00:01:41,280 --> 00:01:43,159
so as a simple example let's think about

48
00:01:43,359 --> 00:01:44,759
a function called area

49
00:01:44,959 --> 00:01:46,519
we know how to calculate the area of a

50
00:01:46,719 --> 00:01:48,519
rectangle it's its width times its

51
00:01:48,719 --> 00:01:51,000
height so let's define that here it is

52
00:01:51,200 --> 00:01:52,840
and we're using a type annotation to

53
00:01:53,040 --> 00:01:54,519
make sure that that version

54
00:01:54,719 --> 00:01:56,840
only works on a rectangle in particular

55
00:01:57,040 --> 00:01:58,359
the object that we're passing in

56
00:01:58,560 --> 00:02:00,599
must have fields called width and height

57
00:02:00,799 --> 00:02:02,840
for this code to even run

58
00:02:03,040 --> 00:02:05,319
but we're also defining another method

59
00:02:05,519 --> 00:02:07,880
where we do not have a type annotation

60
00:02:08,080 --> 00:02:10,600
that means that this code will work for

61
00:02:10,800 --> 00:02:11,399
any

62
00:02:11,598 --> 00:02:14,039
input value that i give it except for

63
00:02:14,239 --> 00:02:15,160
rectangles so

64
00:02:15,360 --> 00:02:18,360
because the method that we just defined

65
00:02:18,560 --> 00:02:21,399
has a more specialized type signature in

66
00:02:21,598 --> 00:02:23,320
other words the sequence of types

67
00:02:23,520 --> 00:02:26,280
which i put into the function is called

68
00:02:26,479 --> 00:02:27,480
signature

69
00:02:27,680 --> 00:02:30,118
julia will realize that when i pass in a

70
00:02:30,318 --> 00:02:31,960
rectangle it should call that more

71
00:02:32,159 --> 00:02:33,399
specialized version

72
00:02:33,598 --> 00:02:35,960
but when i pass in any other object it

73
00:02:36,159 --> 00:02:37,719
will call this general version

74
00:02:37,919 --> 00:02:39,399
so for example if i call it on my

75
00:02:39,598 --> 00:02:41,480
rectangle it correctly multiplies the

76
00:02:41,680 --> 00:02:43,319
width and height and calls the first

77
00:02:43,519 --> 00:02:45,800
method whereas if i pass in just an

78
00:02:46,000 --> 00:02:46,520
integer

79
00:02:46,719 --> 00:02:48,600
it will just return that same value back

80
00:02:48,800 --> 00:02:51,319
to me of course that's not necessarily

81
00:02:51,519 --> 00:02:54,600
ideal either for example area of the

82
00:02:54,800 --> 00:02:55,880
string hello

83
00:02:56,080 --> 00:02:58,520
will return hello so you could complain

84
00:02:58,719 --> 00:03:01,080
well area should only be defined

85
00:03:01,280 --> 00:03:03,000
maybe for numbers for example and you

86
00:03:03,199 --> 00:03:05,719
can specify that in julia as well

87
00:03:05,919 --> 00:03:08,280
so what we're seeing is if i just write

88
00:03:08,479 --> 00:03:09,160
area

89
00:03:09,360 --> 00:03:11,640
i can ask what is the function area and

90
00:03:11,840 --> 00:03:12,679
it's telling me that it's

91
00:03:12,878 --> 00:03:14,840
what's called a generic function so a

92
00:03:15,039 --> 00:03:16,360
function which can have

93
00:03:16,560 --> 00:03:18,600
many methods and in this case we have

94
00:03:18,800 --> 00:03:19,480
two methods

95
00:03:19,680 --> 00:03:21,000
so each of these versions of the

96
00:03:21,199 --> 00:03:22,920
function is called a method

97
00:03:23,120 --> 00:03:25,800
and if for example we later created a

98
00:03:26,000 --> 00:03:26,679
new type called

99
00:03:26,878 --> 00:03:29,240
circle then we would also need a

100
00:03:29,439 --> 00:03:32,360
specialized method of the circle where

101
00:03:32,560 --> 00:03:34,920
it knew that the area should be pi r

102
00:03:35,120 --> 00:03:36,520
squared for example

103
00:03:36,719 --> 00:03:39,000
it's perfectly fine to define that new

104
00:03:39,199 --> 00:03:39,640
type

105
00:03:39,840 --> 00:03:42,840
and a method for the area function when

106
00:03:43,039 --> 00:03:44,679
i define that new type

107
00:03:44,878 --> 00:03:46,599
and when i pass in a circle object it

108
00:03:46,799 --> 00:03:47,719
will actually call

109
00:03:47,919 --> 00:03:51,000
that correct method just note that in

110
00:03:51,199 --> 00:03:51,959
pluto

111
00:03:52,158 --> 00:03:54,360
right now as of this recording you

112
00:03:54,560 --> 00:03:55,560
actually need to put

113
00:03:55,759 --> 00:03:58,118
all the methods of a particular function

114
00:03:58,318 --> 00:04:00,200
together in one cell between

115
00:04:00,400 --> 00:04:03,160
begin and end people often mention

116
00:04:03,360 --> 00:04:04,439
multiple dispatch

117
00:04:04,639 --> 00:04:06,118
when they talk about julia this is a

118
00:04:06,318 --> 00:04:07,480
very key

119
00:04:07,680 --> 00:04:10,599
concept in julia so what does that mean

120
00:04:10,799 --> 00:04:13,080
dispatch is just this process that we've

121
00:04:13,280 --> 00:04:14,280
been describing

122
00:04:14,479 --> 00:04:16,920
where you choose a different method or

123
00:04:17,120 --> 00:04:18,278
version of a function

124
00:04:18,478 --> 00:04:21,319
depending on what the input types are

125
00:04:21,519 --> 00:04:23,400
and multiple dispatch means that you

126
00:04:23,600 --> 00:04:24,360
actually

127
00:04:24,560 --> 00:04:27,240
look at all of the input types for all

128
00:04:27,439 --> 00:04:28,759
of the arguments of your function

129
00:04:28,959 --> 00:04:30,920
to choose which method or version to

130
00:04:31,120 --> 00:04:33,240
call so let's look at an example of that

131
00:04:33,439 --> 00:04:36,199
let's define a complex number cc

132
00:04:36,399 --> 00:04:38,520
three plus four m that's how we define

133
00:04:38,720 --> 00:04:39,960
complex numbers in juliet

134
00:04:40,160 --> 00:04:44,040
i am m stands for imaginary part

135
00:04:44,240 --> 00:04:46,120
so that's basically what i would write

136
00:04:46,319 --> 00:04:47,960
in mathematics as 3 plus 4

137
00:04:48,160 --> 00:04:50,999
times i i being the square root of -1

138
00:04:51,199 --> 00:04:54,360
or some engineers use j in julia we use

139
00:04:54,560 --> 00:04:57,718
m so that we don't take over the symbol

140
00:04:57,918 --> 00:05:00,600
i so that you can use i and j in your

141
00:05:00,800 --> 00:05:01,960
program

142
00:05:02,160 --> 00:05:03,960
and here we're taking three plus four

143
00:05:04,160 --> 00:05:05,480
times m and that gives me a complex

144
00:05:05,680 --> 00:05:06,520
number

145
00:05:06,720 --> 00:05:09,800
and now let's look at how to add

146
00:05:10,000 --> 00:05:13,319
complex numbers so if i do cc

147
00:05:13,519 --> 00:05:17,240
plus cc i get the new complex number

148
00:05:17,439 --> 00:05:20,439
uh 6 plus 8m as i should but how do i

149
00:05:20,639 --> 00:05:21,079
know

150
00:05:21,279 --> 00:05:23,079
what julia is actually doing when it

151
00:05:23,279 --> 00:05:24,439
does that

152
00:05:24,639 --> 00:05:27,639
so i can use this macro at which

153
00:05:27,839 --> 00:05:30,199
and type this put give it this

154
00:05:30,399 --> 00:05:32,199
expression cc plus cc

155
00:05:32,399 --> 00:05:34,520
and it will actually tell me which

156
00:05:34,720 --> 00:05:36,759
method of the plus function

157
00:05:36,959 --> 00:05:39,559
it's calling so plus in julia is just a

158
00:05:39,759 --> 00:05:40,680
normal function

159
00:05:40,879 --> 00:05:42,680
it just has a lot of methods defined in

160
00:05:42,879 --> 00:05:44,040
fact currently

161
00:05:44,240 --> 00:05:47,079
it has 184 methods to find

162
00:05:47,279 --> 00:05:49,639
i can also define new methods of plus if

163
00:05:49,839 --> 00:05:51,639
i define my own types and we'll

164
00:05:51,839 --> 00:05:54,040
see that later in the course we can

165
00:05:54,240 --> 00:05:55,079
actually look

166
00:05:55,279 --> 00:05:57,400
how do you define the sum of two complex

167
00:05:57,600 --> 00:05:58,759
numbers in julia

168
00:05:58,959 --> 00:06:00,600
it will actually give us a link to the

169
00:06:00,800 --> 00:06:02,040
source code so i'm going to click that

170
00:06:02,240 --> 00:06:02,680
link

171
00:06:02,879 --> 00:06:05,559
this takes me to the source code of the

172
00:06:05,759 --> 00:06:07,559
version of julia that i'm running

173
00:06:07,759 --> 00:06:09,639
and it tells me exactly how julia

174
00:06:09,839 --> 00:06:12,199
defines the sum of two complex numbers

175
00:06:12,399 --> 00:06:14,680
so here it is the sum of a variable

176
00:06:14,879 --> 00:06:16,920
called z which is of type complex

177
00:06:17,120 --> 00:06:19,960
and a w which is of type complex is oh

178
00:06:20,160 --> 00:06:20,680
i'm going to make

179
00:06:20,879 --> 00:06:22,838
a new complex number and i'm going to

180
00:06:23,038 --> 00:06:25,319
take the real parts and add them

181
00:06:25,519 --> 00:06:27,079
and take the imaginary parts and add

182
00:06:27,279 --> 00:06:29,400
those and put those inside my complex

183
00:06:29,600 --> 00:06:30,199
number that is

184
00:06:30,399 --> 00:06:32,920
the definition of the sum of two complex

185
00:06:33,120 --> 00:06:33,400
numbers

186
00:06:33,600 --> 00:06:36,838
in julia but you'll see that if i now

187
00:06:37,038 --> 00:06:38,838
add a real number to a complex number

188
00:06:39,038 --> 00:06:39,639
instead

189
00:06:39,839 --> 00:06:41,240
there's a different method that does

190
00:06:41,439 --> 00:06:43,160
something different and actually if i

191
00:06:43,360 --> 00:06:43,559
add

192
00:06:43,759 --> 00:06:45,480
them the other way around i also have to

193
00:06:45,680 --> 00:06:46,680
define that that's

194
00:06:46,879 --> 00:06:49,399
another different definition and you can

195
00:06:49,598 --> 00:06:52,439
go and find out what exactly it's doing

196
00:06:52,639 --> 00:06:55,160
so defining types in julia is a very

197
00:06:55,360 --> 00:06:56,278
common thing to do

198
00:06:56,478 --> 00:06:58,680
and it's very useful and you see from

199
00:06:58,879 --> 00:06:59,639
this notebook

200
00:06:59,839 --> 00:07:02,439
that the point is that we can actually

201
00:07:02,639 --> 00:07:02,838
make

202
00:07:03,038 --> 00:07:05,160
different objects that behave in

203
00:07:05,360 --> 00:07:06,119
different ways

204
00:07:06,319 --> 00:07:08,520
they can have different functions that

205
00:07:08,720 --> 00:07:09,559
i'm calling

206
00:07:09,759 --> 00:07:12,040
even though internally they might have

207
00:07:12,240 --> 00:07:12,838
the exact

208
00:07:13,038 --> 00:07:15,240
same information but i can actually now

209
00:07:15,439 --> 00:07:15,960
specify

210
00:07:16,160 --> 00:07:18,680
that difference to julia and allow it to

211
00:07:18,879 --> 00:07:20,278
call different functions and do

212
00:07:20,478 --> 00:07:25,478
different things

